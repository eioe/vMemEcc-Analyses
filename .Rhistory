source('~/.active-rstudio-document')
# R Homework 7
rm(list=ls()) # clear workspace
nreps = 10 # deceide how many times to run the simulation (10)
pvalues = rep(NA, nreps) # set up a vector to store the p-values
for(i in 1:nreps){ # run the simulation the desired number of times
group1 = rnorm(15, mean=5, sd=1.5) # create group 1
group2 = rnorm(15, mean=6, sd=1.5) # create group 2
result = t.test(group1, group2, var.equal=T) # run the t-test and store the result
pvalues[i] = result$p.value # pick out the p-value from the t-test and store it in the vector
means = c(mean(group1), mean(group2)) # calculate the means of the two samples (and stick them together)
names(means) = c('Group 1', 'Group 2') # give the vector of means named entries (this makes the names appear on the barplot automatically)
ses = c(sd(group1), sd(group2)) / 15^0.5 # calculate the standard errors of the two sample means
upper = means + ses # the upper ends of the error bars
lower = means - ses # the lower ends of the error bars
yrange = c(0, ceiling(max(upper))) # the range of the barplot y axis will be zero to the greater of the two upper limits
barinfo = barplot(means, # create the barplot and request the extra info about where the bars are on the x axis
ylim=yrange, # set the y axis limits to those calculated above
main = paste('Simulation',i)) # put the simulation number as the title
for(g in 1:2){ # for each of the two groups
lines(rep(barinfo[g],2), c(lower[g], upper[g])) # draw its error bar, using the relevant information that was created above
}
}
nsignificant = sum(pvalues < 0.05) # use a logical condition on the vector of p-values to find out how many were 'significant'
cat(nsignificant, 'significant differences found in', nreps, 'tries.\nEstimated power =', nsignificant / nreps) # use cat() to put that information into a printed sentence
datalist = vector(mode='list', length = 7)
datalist[2] = "hansi"
datalist
names(datalist) = c('hansi1', 'hansi2', '3', '4', '5', '6', '7')
lapply(datalist,summary)
datalist[[2]]
datalist[2]
pdata = read.csv('datatable_1.csv')
model = lm(overshoot~latency, data = pdata)
plot(overshoot ~ latency, data = pdata)
lines(c(50,350), c(0,0))
lines(c(50,350), c(0,0), col = 'red', lwd = 3, lty = 2)
abline(0,-0.002)
abline(model$coefficients[[1]],model$coefficients[[2]])
result
result.names
data.names
ceiling(6.3)
ceiling(6,3)
ceiling(6)
ceiling(6.6)
ceiling(6.6)
barinfo[1]
barinfo[2]
barinfo[]
? rep
rep(2)
rep(2:6)
(2:5)
pvalues
? rnorm
rnorm(15)
rnorm(15,100,15)
rnorm(15,mean=100,15)
rnorm(15,mean=100,15)
rnorm(15,sd=15,100)
rnorm(15,sd=15,100)
ts = rt(10, df=1)
ts = rt(10, df=1)
ts = rt(10, df=1)
norms = rnorm(10, mean = 0, sd = 1) #same: rnorm(10) == rnorm(10,0,1)
hist(norms)
hist(ts)
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
par()
parameters = par()
par(bg = "red")
hist(ts)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
par(bg = "white")
hist(ts)
defaults = par()
par(defaults)
par(mfrow = c(1,2))
hist(ts)
par(mfrow = c(1,5))
hist(ts)
par(mfrow = c(1,2))
hist(ts)
hist(norms)
hist(ts)
hist(ts)
hist(norms)
hist(ts)
hist(ts)
hist(ts)
par(mfrow = c(1,5))
hist(ts)
hist(ts)
hist(norms)
hist(ts)
hist(norms)
par(mfrow = c(1,2))
par(mfrow = c(2,2))
hist(norms)
hist(norms)
hist(norms)
hist(norms)
hist(ts, ylab ='')
defaults = par(no.readonly = T); #save default paramters of par()
par(defaults) #set all parameters back to default value
par(mfrow = c(2,2)) #print out 4 plots in a 2x2 fashion
hist(norms)
hist(ts, ylab ='')
hist(ts, ylab ='', yaxt='n') #suppresses y-axis label
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
par(bg = "white")
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
max(c(hist(norms),hist(ts)))
hansi = hist(ts)
hansi
hist.counts(ts)
counts.hist(norms)
hansi.counts
hansi$counts
hist.counts(ts)
hist$counts(ts)
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
#session 8 (07.01.2016)
#choose sample size
nreps = 100
#get nreps random numbers from a normal dustribution with mean=0, sd = 1
norms = rnorm(nreps, mean = 0, sd = 1) #same: rnorm(10) == rnorm(10,0,1)
#get nreps random numbers from a t-distribution
ts = rt(nreps, df=1)
#adapt plotting paramters:
defaults = par(no.readonly = T); #save default paramters of par()
par(bg = "red") #changes background color
par(defaults) #set all parameters back to default value
par(mfrow = c(1,2)) #print out 4 plots in a 1x2 fashion
hn = hist(norms, plot = F) #save infos about histograms while suppressing to plot them
ht = hist(ts, plot = F)
top = ceiling(max(hn$counts(norms),ht$counts(ts))) #get biggest values in the histograms, rounding up
hist(norms)
hist(ts, ylab ='', yaxt='n') #suppresses y-axis label and y-axis
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
#session 8 (07.01.2016)
#choose sample size
nreps = 100
#get nreps random numbers from a normal dustribution with mean=0, sd = 1
norms = rnorm(nreps, mean = 0, sd = 1) #same: rnorm(10) == rnorm(10,0,1)
#get nreps random numbers from a t-distribution
ts = rt(nreps, df=1)
#adapt plotting paramters:
defaults = par(no.readonly = T); #save default paramters of par()
par(bg = "red") #changes background color
par(defaults) #set all parameters back to default value
par(mfrow = c(1,2)) #print out 4 plots in a 1x2 fashion
hn = hist(norms, plot = F) #save infos about histograms while suppressing to plot them
ht = hist(ts, plot = F)
top = ceiling(max(hn$counts,ht$counts) #get biggest values in the histograms, rounding up
hist(norms)
hist(ts, ylab ='', yaxt='n') #suppresses y-axis label and y-axis
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
? axis
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
top
ceiling(top)
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
source('C:/Users/x220t/Dropbox/Programming/R/Course WS15-16/session8.R')
top
ceiling(top)
hist(norms, ylim = c(0,top), xaxt='n')
hist(norms, ylim = c(0,top), xaxt='n')
hist(norms, ylim = c(0,top), xaxt='n')
hist(norms, ylim = c(0,top), xaxt='n')
hist(norms, ylim = c(0,100), xaxt='n')
hist(norms, ylim = c(0,1000), xaxt='n')
hist(norms, ylim = c(0,1000), xaxt='n')
top
top
hist(norms, ylim = c(0,'top'), xaxt='n')
hist(norms, ylim = c(0,"top"), xaxt='n')
hist(norms, ylim = c(0,top), xaxt='n')
top
top = 1000
hist(norms, ylim = c(0,top), xaxt='n')
library(tidyverse)
library(here)
here()
source('D:/vMemEcc/Analysis/anal_behav.R', echo=TRUE)
head()
here()
? here()
dr_here()
source('D:/vMemEcc/Analysis/anal_behav.R', echo=TRUE)
here()
source('D:/vMemEcc/Analysis/anal_behav.R', echo=TRUE)
dr_here()
getwd()
library(tidyverse)
library(here)
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
this.dir <- dirname(parent.frame(2)$ofile)
parent.frame(2)$ofile
getSrcDirectory()[1]
getSrcDirectory()
?getSrcDirectory()[1]
?getSrcDirectory()
setwd("D:/vMemEcc/Analysis")
library(here)
here()
getwd()
library(here)
here()
library(tidyverse)
library(here)
here()
source('D:/vMemEcc/Analysis/anal_behav.R', echo=TRUE)
getwd()
here()
library(here)
here()
path()
path
set_here("..")
here()
