"c_ResponseCorrect" = "mem_acc",
"alphapwr_diff_retent" = "alphalat",
"CDA_amp_clustertimes" = "cda",
"PNP_amp_clustertimes" = "pnp",
"maxDecodScore_sensorspace" = "decod_sensorspace_maxscore",
"maxDecodScoreTime_sensorspace" = "decod_sensorspace_maxscoretime",
"maxDecodScore_csp" = "decod_csp_maxscore",
"maxDecodScoreTime_csp" = "decod_csp_maxscoretime"
)
for (tmp in list(stats_overall[[task]][[outvar]], stats_memLoad[[task]][[outvar]], stats_ecc[[task]][[outvar]])) {
for (lvl in tmp$levels) {
for (stat in c("mean", "sd", "min", "max", "ci95lower", "ci95upper", "cmci95lower", "cmci95upper")) {
# for the grand average, we skip the Cousineau-Morey CIs (as we could not calculate them):
if (tmp$name == "overall" && str_detect(stat, "cmci")) {
next
}
extract_var(str_glue("{dv_str}_{task}_{lvl}{stat}"), tmp$stats[str_c(lvl, stat)], exp_format="%.2f")
}
}
}
}
}
# Code to chunk:
insert_fun("func_analysis_01")
# VSTM task:
results_anova_behav_exp <- func_analysis_01('experiment')
for (eff in c("c_StimN", "c_Ecc", "c_StimN:c_Ecc")) {
eff_print <- eff %>%
str_replace_all("c_", "") %>%
str_replace_all(":", "x")
extract_var(str_c("anova_behav_exp_eff_", eff_print, "_F"), summary(results_anova_behav_exp$aov.srt)[[str_c("Error: ppid:", eff)]][[1]][[eff, "F value"]])
extract_var(str_c("anova_behav_exp_eff_", eff_print, "_df_within"), summary(results_anova_behav_exp$aov.srt)[[str_c("Error: ppid:", eff)]][[1]][[eff, "Df"]],
exp_format = "%i")
extract_var(str_c("anova_behav_exp_eff_", eff_print, "_df_resid"), summary(results_anova_behav_exp$aov.srt)[[str_c("Error: ppid:", eff)]][[1]][["Residuals", "Df"]],
exp_format = "%i")
extract_var(str_c("anova_behav_exp_eff_", eff_print, "_p"), summary(results_anova_behav_exp$aov.srt)[[str_c("Error: ppid:", eff)]][[1]][[eff, "Pr(>F)"]],
is_pval = TRUE,
exp_format = "%.3f")
}
# perceptual Change Detection Task:
results_anova_behav_perc <- func_analysis_01('perception')
for (eff in c("c_StimN", "c_Ecc", "c_StimN:c_Ecc")) {
eff_print <- eff %>%
str_replace_all("c_", "") %>%
str_replace_all(":", "x")
extract_var(str_c("anova_behav_perc_eff_", eff_print, "_F"), summary(results_anova_behav_perc$aov.srt)[[str_c("Error: ppid:", eff)]][[1]][[eff, "F value"]])
extract_var(str_c("anova_behav_perc_eff_", eff_print, "_df_within"), summary(results_anova_behav_perc$aov.srt)[[str_c("Error: ppid:", eff)]][[1]][[eff, "Df"]],
exp_format = "%i")
extract_var(str_c("anova_behav_perc_eff_", eff_print, "_df_resid"), summary(results_anova_behav_perc$aov.srt)[[str_c("Error: ppid:", eff)]][[1]][["Residuals", "Df"]],
exp_format = "%i")
extract_var(str_c("anova_behav_perc_eff_", eff_print, "_p"), summary(results_anova_behav_perc$aov.srt)[[str_c("Error: ppid:", eff)]][[1]][[eff, "Pr(>F)"]],
is_pval = TRUE,
exp_format = "%.3f")
}
# VSTM task:
func_analysis_03('experiment')
# perceptual Change Detection Task:
func_analysis_03('perception')
results_anova_cda <- func_analysis_05(dep_variable = "CDA_amp_clustertimes")
# Code to chunk:
insert_fun("func_analysis_05")
for (eff in c("c_StimN", "c_Ecc", "c_StimN:c_Ecc")) {
eff_print <- eff %>%
str_replace_all("c_", "") %>%
str_replace_all(":", "x")
# TODO: it's really ugly to split up the exports between here and the function call. I feel bad but will change this only in future projects.
extract_var(str_c("anova_cda_eff_", eff_print, "_F"), summary(results_anova_cda)[[str_c("Error: ppid:", eff)]][[1]][[eff, "F value"]])
extract_var(str_c("anova_cda_eff_", eff_print, "_df_within"), summary(results_anova_cda)[[str_c("Error: ppid:", eff)]][[1]][[eff, "Df"]],
exp_format = "%i")
extract_var(str_c("anova_cda_eff_", eff_print, "_df_resid"), summary(results_anova_cda)[[str_c("Error: ppid:", eff)]][[1]][["Residuals", "Df"]],
exp_format = "%i")
extract_var(str_c("anova_cda_eff_", eff_print, "_p"), summary(results_anova_cda)[[str_c("Error: ppid:", eff)]][[1]][[eff, "Pr(>F)"]],
is_pval = TRUE,
exp_format = "%.3f")
}
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
summary(m1)
contest1D(m1, c(0, 0, 0, 1, 0, 0), confint=T)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_fixedtimes')
summary(m1)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
summary(m1)
coef(summary(m1))
oo <- coef(summary(m1))
round(oo)
round(oo, 2)
coef(summary(m1, confint=T))
m1
summary(m1)
contest1D(m1, c(1,0,0,0,0,0), confint = T)
o <- contest1D(m1, c(1,0,0,0,0,0), confint = T)
ci <- c(o$lower, o$upper)
ci
ci <- round(ci, 2)
ci
n_coef = length(fixef(m))
n_coef = length(fixef(m1))
i = 2
L = diag(n_coef)[i, ]
L
m1
fixef(m1).names
fixef(m1)
nemaes(fixef(m1))
names(fixef(m1))
df <- data.frame(n_coef, 2)
df[, 1] <- names(fixef(m1))
names(fixef(m1))[1]
length(names(fixef(m1))[1])
length(names(fixef(m1)))
n_coef = length(fixef(m1))
df <- data.frame(n_coef, 2)
df[, 1] <- names(fixef(m1))
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m1, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
df[i, 1] <- names(fixef(m1))
df[i, 2] <- ci
}
n_coef = length(fixef(m1))
df <- data.frame(n_coef, 2)
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m1, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
df[i, 1] <- names(fixef(m1))
df[i, 2] <- ci
}
n_coef = length(fixef(m1))
df <- data.frame(n_coef, 2)
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m1, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
df[i, 1] <- names(fixef(m1)[i])
df[i, 2] <- ci
}
n_coef = length(fixef(m1))
df <- data.frame(n_coef, 3)
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m1, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
df[i, 1] <- names(fixef(m1)[i])
df[i, 2:3] <- ci
}
df
? data.frame
print_CI <- function(m) {
n_coef = length(fixef(m))
df <- data.frame(n_coef, 3)
colnames(df) <- c("fixed effect", "lower", "upper")
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
df[i, 1] <- names(fixef(m)[i])
df[i, 2:3] <- ci
}
return(df)
}
print_CI(m1)
dd <<- ddata.frame(fixed_eff = character(6))
dd <- data.frame(fixed_eff = character(6))
dd
print_CI <- function(m) {
n_coef = length(fixef(m))
df <- data.frame(fixed_effect = character(n_coef), lower = numeric(n_coef), upper = numeric(n_coef))
colnames(df) <- c("fixed effect", "lower", "upper")
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
df[i, 1] <- names(fixef(m)[i])
df[i, 2:3] <- ci
}
return(df)
}
print_CI(m1)
coef(summary(m1))
df1 <- coef(summary(m1))
df2 <- print_CI(m1)
left_join(df1, df2
)
class(df1)
as_tibble(df1)
? as_tibble
data.frame(df1)
left_join(data.frame(df1), df2
)
hm <- data.frame(df1)
? data.frame
row.names(hm)
summary_df <- coef(summary(m1))
summary_df$fixed_eff <- rownames(summary_df)
summary_df
summary_df <- coef(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
summary_df
summary_df$fixed_eff <- rownames(summary_df)
summary_df
ci_df <- print_CI(m1)
ci_df
left_join(ci_df, summary_df)
print_CI <- function(m) {
n_coef = length(fixef(m))
df <- data.frame(fixed_effect = character(n_coef), lower = numeric(n_coef), upper = numeric(n_coef))
colnames(df) <- c("fixed_eff", "lower", "upper")
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
df[i, 1] <- names(fixef(m)[i])
df[i, 2:3] <- ci
}
return(df)
}
summary_df <- data.frame(coef(summary(m1)))
summary_df$fixed_eff <- rownames(summary_df)
ci_df <- print_CI(m1)
left_join(ci_df, summary_df)
oo <- left_join(ci_df, summary_df)
round(oo, 2)
round(oo[, 2:-1], 2)
round(oo[, 2:end], 2)
oo[, -1]
print_CI <- function(m) {
n_coef = length(fixef(m))
df <- data.frame(lower = numeric(n_coef), upper = numeric(n_coef))  #(fixed_effect = character(n_coef), lower = numeric(n_coef), upper = numeric(n_coef))
colnames(df) <- c("lower", "upper")
rownames(df) <- fixef(m)
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
#df[i, 1] <- names(fixef(m)[i])
df[i, 1:2] <- ci
}
return(df)
}
ci_df <- print_CI(m1)
ci_df
print_CI <- function(m) {
n_coef = length(fixef(m))
df <- data.frame(lower = numeric(n_coef), upper = numeric(n_coef))  #(fixed_effect = character(n_coef), lower = numeric(n_coef), upper = numeric(n_coef))
colnames(df) <- c("lower", "upper")
rownames(df) <- names(fixef(m))
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m, L, confint = T)
ci <- c(o$lower, o$upper)
ci <- round(ci, 2)
#df[i, 1] <- names(fixef(m)[i])
df[i, 1:2] <- ci
}
return(df)
}
ci_df <- print_CI(m1)
ci_df
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
summary_df <- data.frame(coef(summary(m1)))
merge(summary_df, ci_df)
merge(summary_df, ci_df, by = 0)
print_CI <- function(m) {
n_coef = length(fixef(m))
df <- data.frame(lower = numeric(n_coef), upper = numeric(n_coef))
colnames(df) <- c("lower", "upper")
rownames(df) <- names(fixef(m))
for (i in 1:n_coef){
L = diag(n_coef)[i, ]
o <- contest1D(m, L, confint = T)
ci <- c(o$lower, o$upper)
df[i, 1:2] <- ci
}
return(df)
}
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
summary_df <- data.frame(coef(summary(m1)))
summary_df$fixed_eff <- rownames(summary_df)
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -1] <- round(summary_df[, -1])
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -1] <- round(summary_df[, -1], 2)
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, "Pr...t..")] <- round(summary_df[, -1], 2)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, 5)] <- round(summary_df[, -c(1, 5)], 2)
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, 5)] <- round(summary_df[, -c(1, 5)], 2)
summary_df[, 5] <- round(summary_df[, 5], 3)
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, 6)] <- round(summary_df[, -c(1, 6)], 2)
summary_df[, 6] <- round(summary_df[, 6], 3)
print(summary_df)
sprintf("[%s; %s]", 23.4, 345.4534)
? sprintf
sprintf("[%f2; %f2]", 23.4, 345.4534)
sprintf("[%2f; %2f]", 23.4, 345.4534)
sprintf("[%.2f; %.2f]", 23.4, 345.4534)
summary_df$cci <- sprintf("[%.2f; %.2f]", summary_df$lower, summary_df$upper)
summary_df
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_clustertimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, 6)] <- round(summary_df[, -c(1, 6)], 2)
# round p-value to 3 digits:
summary_df[, 6] <- round(summary_df[, 6], 3)
summary_df$ci_formatted <- sprintf("[%.2f; %.2f]", summary_df$lower, summary_df$upper)
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_fixedtimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, 6)] <- round(summary_df[, -c(1, 6)], 2)
# round p-value to 3 digits:
summary_df[, 6] <- round(summary_df[, 6], 3)
summary_df$ci_formatted <- sprintf("[%.2f; %.2f]", summary_df$lower, summary_df$upper)
print(summary_df)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_fixedtimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, 6)] <- round(summary_df[, -c(1, 6)], 2)
# round p-value to 3 digits:
summary_df[, 6] <- round(summary_df[, 6], 3)
summary_df$ci_formatted <- sprintf("[%.2f; %.2f]", summary_df$lower, summary_df$upper)
print(summary_df[, c(1, 2, 5, 4, 9, 6, 3, 7, 8)
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_fixedtimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, 6)] <- round(summary_df[, -c(1, 6)], 2)
# round p-value to 3 digits:
summary_df[, 6] <- round(summary_df[, 6], 3)
summary_df$ci_formatted <- sprintf("[%.2f; %.2f]", summary_df$lower, summary_df$upper)
print(summary_df[, c(1, 2, 5, 4, 9, 6, 3, 7, 8)]
m1 <- func_analysis_07('experiment', dep_variable = 'CDA_amp_fixedtimes')
print(summary(m1))
summary_df <- data.frame(coef(summary(m1)))
ci_df <- print_CI(m1)
summary_df <- merge(summary_df, ci_df, by = 0)
summary_df[, -c(1, 6)] <- round(summary_df[, -c(1, 6)], 2)
# round p-value to 3 digits:
summary_df[, 6] <- round(summary_df[, 6], 3)
summary_df$ci_formatted <- sprintf("[%.2f; %.2f]", summary_df$lower, summary_df$upper)
print(summary_df[, c(1, 2, 5, 4, 9, 6, 3, 7, 8)])
View(data_behav)
knitr::opts_chunk$set(echo = TRUE)
#--------------------------------------------------------------------------
# Run main script for analysis for:
#  vMemEcc
#--------------------------------------------------------------------------
library(here)
library(knitr)
#--------------------------------------------------------------------------
# Define pathes
path_global 	    <- here('../..')
path_r_data       <- file.path(path_global, 'Data/DataR')
path_scripts_sven <- file.path(here('Workflow_Sven',
'osf_experiment1',
'_RScripts'))
path_extracted_vars <- file.path(here('../VME_extracted_vars.json'))
# path_global, 'Writing',
#                            'Other',
#                            'VME_extracted_vars.json')
#--------------------------------------------------------------------------
## load packages & custom utils:
source(here("Utils", "load_packages.R"))
source(file.path(path_scripts_sven,"loadPackages.R"))
source(here('Utils', 'print_output.R'))
source(here('Utils', 'utils_report.R'))
source(here('Utils', 'calc_conf_intervalls.R'))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## define colors
source(file.path(path_scripts_sven, "loadColors.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load function to compute confidence intervals
source(file.path(path_scripts_sven,"loadFunctions.R"))
source(file.path(here('Utils', 'load_functions.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load theme
source(file.path(path_scripts_sven, "loadTheme.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load data, assign names for columns and define variable type
source(file.path(here('Utils', 'load_data.R')))
#--------------------------------------------------------------------------
# Write
extract_var("r_version", "v4.1.0", exp_format = "%s")
extract_var("rstudio_version", "v1.4.1717", exp_format = "%s")
df = data.frame(a= randi(10), b = randi(10)
)
df
df = data.frame(a= randi(10, 10), b = randi(10, 10))
df
df = data.frame(a= randi(10, 10, 1), b = randi(10, 10, 1))
df
a = randi(100, 15, 1)
b = randi(110, 15, 1)
df = data.frame(a= a, b = b)
df
a
transpose(a)
transpose(list(a))
b = randi(110, 11, 1)
b = randi(110, 11, 1)
b
a = randi(100, 1, 25)
a
b = randi(110, 1, 25)
b
df = data.frame(a= a, b = b)
df
df = data.frame(a= transpose(a), b = transpose(b))
c = c(72 57 99 62 20 73 33 17 12 12 65 18 25 73 36 32 99  2 19 17 73 33 10 79 99 27)
c = c(72, 57, 99, 62, 20, 73, 33, 17, 12, 12, 65, 18, 25, 73, 36, 32, 99,  2, 19, 17, 73, 33, 10, 79, 99, 27)
d = c(89, 3, 7, 70, 62, 44, 69, 87, 41, 99, 62, 6, 97, 15, 23, 55, 91, 5, 40, 6, 2, 7, 96, 32, 91, 44)
df2 = data.frame(c=c, d=d)
df2
cm.ci(df2)
c = c(6, 28, 1, 31, 21, 11, 16, 18, 33, 24, 19, 10, 18, 29, 19, 22, 33, 3, 11, 27, 28, 8, 8, 29, 20, 23, 18, 6, 14, 14, 29, 26, 27)
d = c(5.30745714e-01,  3.38050353e-01, -2.90183129e-01,  9.44208075e-01,
-1.11842533e+00,  4.10060881e-01, -1.34598467e+00, -3.83657010e-01,
1.25471992e+00,  9.46450168e-01,  1.06086916e+00, -6.85981258e-01,
-9.97725251e-04,  2.28424613e-01,  5.50068429e-01,  5.70256522e-01,
2.34495886e+00, -1.50241758e+00,  9.98906598e-01, -5.05345138e-02,
-8.51131467e-01,  1.86432930e+00, -7.16926191e-03,  3.72053346e-01,
-3.13637985e-01, -1.30287982e+00, -2.60752105e+00, -1.68845108e-01,
1.24592792e+00, -6.92711782e-01, -1.01868744e+00,  4.33901294e-02,
-1.19981443e+00, -6.59432175e-01,  2.18767778e-01)
d
c = 0.43941126, -1.24741587,  0.89253473, -1.31459815, -0.34642314,
-1.24363786, -0.53170641, -0.83252422,  0.37633028, -0.62746373,
0.63824797, -0.63068221,  0.00781237, -0.33623259, -0.76071024,
-0.09328378, -0.15772262,  1.28999301,  0.21629052,  0.69681221,
-1.62782479, -0.30368797,  0.15955684, -0.63731467, -0.33182445,
0.79896622, -0.67664674,  0.3689556 , -0.21624938, -1.72957429,
-0.0583198 , -0.81045526,  0.72335188,  1.00499897, -0.32295144)
c = c(0.43941126, -1.24741587,  0.89253473, -1.31459815, -0.34642314,
-1.24363786, -0.53170641, -0.83252422,  0.37633028, -0.62746373,
0.63824797, -0.63068221,  0.00781237, -0.33623259, -0.76071024,
-0.09328378, -0.15772262,  1.28999301,  0.21629052,  0.69681221,
-1.62782479, -0.30368797,  0.15955684, -0.63731467, -0.33182445,
0.79896622, -0.67664674,  0.3689556 , -0.21624938, -1.72957429,
-0.0583198 , -0.81045526,  0.72335188,  1.00499897, -0.32295144)
df3 = data.frame(d, c)
df3
cm.ci(df3)
qt(15, 3)
qt(15, 1)
? qt
qt(0.05, 1)
qt(0.05, 4)
