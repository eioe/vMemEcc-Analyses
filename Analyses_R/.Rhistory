#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) -> pplot
pplot
theme(axis.text.x=element_blank()) -> pplot
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) -> pplot
pplot
pplot
theme(axis.text.x=element_blank()) -> pplot
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) %>%
theme(axis.text.x=element_blank()) -> pplot
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) %>%
theme(axis.text.x=element_blank()) -> pplot
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) %>%
theme(axis.text.x=element_blank())
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) #%>%
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) +
theme(axis.text.x=element_blank()) -> pplot
pplot
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) +
theme(axis.text.x=element_blank(), axis.title = 'Subjects') -> pplot
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) +
theme(axis.text.x=element_blank(), axis.title = element_text('Subjects')) -> pplot
pplot
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) +
xlab('Subjects')
accuracy_summary %>%
#arrange(model, Condition, accuracy) %>%
add_column(ordervar) %>%
arrange(ordervar) %>%
#mutate(ordervar=factor(ordervar, levels=ordervar)) %>%
ggplot(aes(x = ordervar, y = accuracy, col = model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) +
xlab('Subjects') +
theme(axis.text.x=element_blank()) -> pplot
pplot
accuracy_summary %>%
add_column(ordervar) %>%
recode(Condition, mov = 'Movement') %>%
arrange(ordervar) %>%
ggplot(aes(x = ordervar, y = accuracy, col = Model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = Model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) +
xlab('Subjects') +
theme(axis.text.x=element_blank()) -> pplot
? recode
accuracy_summary %>%
add_column(ordervar) %>%
mutate(Condition = recode(Condition, mov = 'Movement', nomov = 'No Movement'))  %>%
arrange(ordervar) %>%
ggplot(aes(x = ordervar, y = accuracy, col = Model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = Model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) +
xlab('Subjects') +
theme(axis.text.x=element_blank()) -> pplot
pplot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
# disable scientific notation:
options(scipen=999)
# Set up paths:
path_data <- here('Results')
# Get summary data:
data_ls <- list()
conds <- c('mov', 'nomov')
for (cond in conds) {
fname <- str_c('results_across_methods_', cond, '.csv')
fpath <- file.path(path_data, fname)
data_ls[[cond]] <- read_csv2(fpath)
}
data_df <- bind_rows(data_ls, .id = 'condition')
# select data of binary approaches only and put into long format:
data_bin <- data_df %>%
select(condition, Subject, LSTM, CSP) %>%
gather('LSTM', 'CSP', key = method, value = accuracy)
#Get single sample data:
model_pred_ls <- list()
model_targ_ls <- list()
data_pred_ls <- list()
data_targ_ls <- list()
data_pred_df <- NULL
data_targ_df <- NULL
samp_col_names <- sprintf('S%d', 1:270)
for (model in list('CSP', 'LSTM')) {
for (cond in conds) {
# Get prediction data:
fname <- str_c('predictionTable', model, '_', cond, '.csv')
fpath <- file.path(path_data, model, cond, fname)
dat <- read_csv(fpath, col_names = FALSE)
# Recode CSP data to [-1,1]:
if (model == 'CSP') {
dat <- dat %>%
mutate_at(vars(X2:X271), list(~recode(.,`0` = -1)))
}
data_pred_ls[[cond]] <- dat
# Get target data:
fname <- str_c('targetTable', model, '_', cond, '.csv')
fpath <- file.path(path_data, model, cond, fname)
dat <- read_csv(fpath, col_names = FALSE)
# Recode CSP data to [-1,1]:
if (model == 'CSP') {
dat <- dat %>%
mutate_at(vars(X2:X271), list(~recode(.,`1` = -1, `2`= 1)))
}
data_targ_ls[[cond]] <- dat
}
data_pred_df <- bind_rows(data_pred_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
data_targ_df <- bind_rows(data_targ_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
model_pred_ls[[model]] <- data_pred_df
model_targ_ls[[model]] <- data_targ_df
}
data_pred_df_full <- bind_rows(model_pred_ls, .id = 'Model')
data_targ_df_full <- bind_rows(model_targ_ls, .id = 'Model')
# combine, calc accuracy, and run binomial test:
binom_func <- function(n_corr_samps, n_samps_tot, p_guess) {
binom.test(n_corr_samps, n_samps_tot, p = p_guess, alternative = "greater")
}
pred_success <- data_pred_df_full
pred_success[, samp_col_names] <- data_targ_df_full[, samp_col_names] == data_pred_df_full[, samp_col_names]
pred_success$Ncorrect <- rowSums(pred_success[, samp_col_names], na.rm = T)
pred_success$Ntot <- rowSums(!is.na(pred_success[, samp_col_names]))
pred_success$accuracy <- pred_success$Ncorrect/pred_success$Ntot
pred_success %>%
mutate(accuracy = Ncorrect/Ntot) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorrect, Ntot, 0.5)$p.value) %>%
select(-one_of(samp_col_names)) -> pred_success
# summary stats:
pred_success %>%
group_by(Model, Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) ->
accuracy_summary
accuracy_summary %>%
rownames_to_column() %>%
arrange(Model, Condition, accuracy) %>%
mutate(mixed = as.integer(rowname)) %>%
select(-rowname) %>%
rownames_to_column()  %>%
arrange(mixed) -> ordered_subs
ordervar<- rep(as.integer(ordered_subs$rowname[1:45]), 2)
accuracy_summary %>%
add_column(ordervar) %>%
mutate(Condition = recode(Condition, mov = 'Movement', nomov = 'No Movement'))  %>%
arrange(ordervar) %>%
ggplot(aes(x = ordervar, y = accuracy, col = Model)) +
facet_wrap(~Condition, scales = 'free') +
geom_point(aes(shape = Model), size = 3) +
theme_bw() +
scale_color_brewer(palette="Paired") +
scale_shape_manual(values=c(13, 16, 17)) +
xlab('Subjects') +
theme(axis.text.x=element_blank()) -> pplot
pplot
######## old stuff (can probably be deprecated):
data_bin %>%
select(accuracy) %>%
na.omit() %>%
mutate(avg_n_corr_samples = round(accuracy * 180)) %>%
rowwise() %>%
mutate(p_val = binom_func(avg_n_corr_samples, 180, 0.5)$p.value) -> he
dat %>%
select(condition, Subject, LSTM, CSP) %>%
gather('LSTM', 'CSP', key = method, value = accuracy) %>%
group_by(method, condition) %>%
summarise(meanacc = mean(accuracy, na.rm=T)) ->
outp
corr(accuracy~Model, data = data_pred_df_full)
cor(accuracy~Model, data = data_pred_df_full)
View(pred_success)
cor(pred_success$accuracy[1:45]~pred_success$accuracy[46:90])
cor(pred_success$accuracy[1:45], pred_success$accuracy[46:90])
lm(pred_success$accuracy[1:45], pred_success$accuracy[46:90])
lm(pred_success$accuracy[1:45]~pred_success$accuracy[46:90])
summary(lm(pred_success$accuracy[1:45]~pred_success$accuracy[46:90]))
summary(lm(pred_success$accuracy[1:19]~pred_success$accuracy[46:46+18]))
summary(lm(pred_success$accuracy[1:19]~pred_success$accuracy[46:46+19]))
summary(lm(pred_success$accuracy[1:19]~pred_success$accuracy[46:(46+18)]))
summary(lm(pred_success$accuracy[20:45]~pred_success$accuracy[(46+19):90]))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
# disable scientific notation:
options(scipen=999)
# Set up paths:
path_data <- here('Results')
data_ls <- list()
conds <- c('mov', 'nomov')
for (cond in conds) {
fname <- str_c('results_across_methods_', cond, '.csv')
fpath <- file.path(path_data, fname)
data_ls[[cond]] <- read_csv2(fpath)
}
data_df <- bind_rows(data_ls, .id = 'condition')
# select data of binary approaches only and put into long format:
data_bin <- data_df %>%
select(condition, Subject, LSTM, CSP) %>%
gather('LSTM', 'CSP', key = method, value = accuracy)
View(data_df)
min(data_df$LSTM)
min(data_df$LSTM, na.rm = T)
#Get single sample data:
model_pred_ls <- list()
model_targ_ls <- list()
data_pred_ls <- list()
data_targ_ls <- list()
data_pred_df <- NULL
data_targ_df <- NULL
samp_col_names <- sprintf('S%d', 1:270)
for (model in list('CSP', 'LSTM')) {
for (cond in conds) {
# Get prediction data:
fname <- str_c('predictionTable', model, '_', cond, '.csv')
fpath <- file.path(path_data, model, cond, fname)
dat <- read_csv(fpath, col_names = FALSE)
# Recode CSP data to [-1,1]:
if (model == 'CSP') {
dat <- dat %>%
mutate_at(vars(X2:X271), list(~recode(.,`0` = -1)))
}
data_pred_ls[[cond]] <- dat
# Get target data:
fname <- str_c('targetTable', model, '_', cond, '.csv')
fpath <- file.path(path_data, model, cond, fname)
dat <- read_csv(fpath, col_names = FALSE)
# Recode CSP data to [-1,1]:
if (model == 'CSP') {
dat <- dat %>%
mutate_at(vars(X2:X271), list(~recode(.,`1` = -1, `2`= 1)))
}
data_targ_ls[[cond]] <- dat
}
data_pred_df <- bind_rows(data_pred_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
data_targ_df <- bind_rows(data_targ_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
model_pred_ls[[model]] <- data_pred_df
model_targ_ls[[model]] <- data_targ_df
}
data_pred_df_full <- bind_rows(model_pred_ls, .id = 'Model')
data_targ_df_full <- bind_rows(model_targ_ls, .id = 'Model')
pred_success <- data_pred_df_full
pred_success[, samp_col_names] <- data_targ_df_full[, samp_col_names] == data_pred_df_full[, samp_col_names]
pred_success$Ncorrect <- rowSums(pred_success[, samp_col_names], na.rm = T)
pred_success$Ntot <- rowSums(!is.na(pred_success[, samp_col_names]))
pred_success$accuracy <- pred_success$Ncorrect/pred_success$Ntot
View(pred_success)
ppred_success %>%  filter(Model = 'LSTM') -> ha
pred_success %>%  filter(Model = 'LSTM') -> ha
pred_success %>%  filter(Model == 'LSTM') -> ha
View(ha)
min(ha$accuracy)
max(ha$Ntot)
ha %>%  print()
ha %>% arrange(accuracy) %>%  select(-samp_col_names) %>%  print()
View(data_bin)
ha %>% arrange(desc(accuracy)) %>%  select(-samp_col_names) %>%  print()
max(ha$Ntot)
min(ha$Ntot)
library(eegUtils)
# Load topography information
Topo_Emo = read.csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv", header=TRUE, sep=",")
# Re-name to fit topoplot function
names(Topo_Emo)[names(Topo_Emo) == "Time"] = "time"
# Change from wide to long format for electrodes
Topo_Emo = gather(Topo_Emo, electrode, amplitude, Fp1:Oz, factor_key=TRUE)
# Rename A1/A2
names(Topo_Emo)[names(Topo_Emo) == "A1"] <- "TP9"
names(Topo_Emo)[names(Topo_Emo) == "A2"] <- "TP10"
# Plot topoplots for neutral
Topo_Emo_Neu = subset(Topo_Emo, Condition == 2)
# P1s
topoplot(Topo_Emo_Neu, time_lim = c(80, 120),interp_limit = "head", limits = c(-5,15))+
ggtitle("P1 (80-120 ms)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
annotate(geom="text", x=-1.05, y=-1, label="neutral", size=3)
? read.csv
? read_csv
# Load topography information
Topo_Emo = read_csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv", header=TRUE, sep=",")
# Load topography information
Topo_Emo = read_csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv", col_names = TRUE, sep=",")
# Load topography information
Topo_Emo = read_csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv", col_names = TRUE)
# Re-name to fit topoplot function
names(Topo_Emo)[names(Topo_Emo) == "Time"] = "time"
# Change from wide to long format for electrodes
Topo_Emo = gather(Topo_Emo, electrode, amplitude, Fp1:Oz, factor_key=TRUE)
# Rename A1/A2
names(Topo_Emo)[names(Topo_Emo) == "A1"] <- "TP9"
names(Topo_Emo)[names(Topo_Emo) == "A2"] <- "TP10"
# Plot topoplots for neutral
Topo_Emo_Neu = subset(Topo_Emo, Condition == 2)
# P1s
topoplot(Topo_Emo_Neu, time_lim = c(80, 120),interp_limit = "head", limits = c(-5,15))+
ggtitle("P1 (80-120 ms)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
annotate(geom="text", x=-1.05, y=-1, label="neutral", size=3)
# Load topography information
Topo_Emo = read_csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv",
col_names = TRUE,
n_max = 2)
# Re-name to fit topoplot function
names(Topo_Emo)[names(Topo_Emo) == "Time"] = "time"
# Change from wide to long format for electrodes
Topo_Emo = gather(Topo_Emo, electrode, amplitude, Fp1:Oz, factor_key=TRUE)
# Rename A1/A2
names(Topo_Emo)[names(Topo_Emo) == "A1"] <- "TP9"
names(Topo_Emo)[names(Topo_Emo) == "A2"] <- "TP10"
# Plot topoplots for neutral
Topo_Emo_Neu = subset(Topo_Emo, Condition == 2)
# P1s
topoplot(Topo_Emo_Neu, time_lim = c(80, 120),interp_limit = "head", limits = c(-5,15))+
ggtitle("P1 (80-120 ms)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
annotate(geom="text", x=-1.05, y=-1, label="neutral", size=3)
View(Topo_Emo_Neu)
Topo_Emo
# Load topography information
Topo_Emo = read_csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv",
col_names = TRUE,
n_max = 2)
# Re-name to fit topoplot function
names(Topo_Emo)[names(Topo_Emo) == "Time"] = "time"
# Change from wide to long format for electrodes
Topo_Emo = gather(Topo_Emo, electrode, amplitude, Fp1:Oz, factor_key=TRUE)
# Load topography information
Topo_Emo = read_csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv",
col_names = TRUE,
n_max = 3)
View(Topo_Emo)
# Load topography information
Topo_Emo = read_csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv",
col_names = TRUE,
n_max = 3)
# Re-name to fit topoplot function
names(Topo_Emo)[names(Topo_Emo) == "Time"] = "time"
# Change from wide to long format for electrodes
Topo_Emo = gather(Topo_Emo, electrode, amplitude, Fp1:Oz, factor_key=TRUE)
View(Topo_Emo_Neu)
# Rename A1/A2
names(Topo_Emo)[names(Topo_Emo) == "A1"] <- "TP9"
names(Topo_Emo)[names(Topo_Emo) == "A2"] <- "TP10"
# Plot topoplots for neutral
Topo_Emo_Neu = subset(Topo_Emo, Condition == 2)
# Plot topoplots for neutral
Topo_Emo_Neu = subset(Topo_Emo, Condition == 1)
# P1s
topoplot(Topo_Emo_Neu, time_lim = c(80, 120),interp_limit = "head", limits = c(-5,15))+
ggtitle("P1 (80-120 ms)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
annotate(geom="text", x=-1.05, y=-1, label="neutral", size=3)
# P1s
topoplot(Topo_Emo_Neu, time_lim = c(1, 1),interp_limit = "head", limits = c(-5,15))+
ggtitle("P1 (80-120 ms)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
annotate(geom="text", x=-1.05, y=-1, label="neutral", size=3)
# P1s
topoplot(Topo_Emo_Neu, time_lim = c(-1000, 1),interp_limit = "head", limits = c(-5,15))+
ggtitle("P1 (80-120 ms)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
annotate(geom="text", x=-1.05, y=-1, label="neutral", size=3)
# Load topography information
Topo_Emo = read_csv(file="C:/Users/Felix/Downloads/ERPs_Topo_Emotions.csv",
col_names = TRUE,
n_max = 1)
# Re-name to fit topoplot function
names(Topo_Emo)[names(Topo_Emo) == "Time"] = "time"
# Re-name to fit topoplot function
names(Topo_Emo)[names(Topo_Emo) == "Time"] = "time"
# Change from wide to long format for electrodes
Topo_Emo = gather(Topo_Emo, electrode, amplitude, Fp1:Oz, factor_key=TRUE)
# Rename A1/A2
names(Topo_Emo)[names(Topo_Emo) == "A1"] <- "TP9"
names(Topo_Emo)[names(Topo_Emo) == "A2"] <- "TP10"
# Plot topoplots for neutral
Topo_Emo_Neu = subset(Topo_Emo, Condition == 1)
# P1s
topoplot(Topo_Emo_Neu, time_lim = c(-1000, 1),interp_limit = "head", limits = c(-5,15))+
ggtitle("P1 (80-120 ms)")+
theme(plot.title = element_text(hjust = 0.5, face = "bold"))+
annotate(geom="text", x=-1.05, y=-1, label="neutral", size=3)
aa <- rand(4)
runif(4)
runif(4) + 2
a <- runif(100)
b <- runif(90) + 0.2
mean(b)
mean(a)
c <- runif(70) - 0.2
mean(c)
mean(c(a,b,c))
mean(mean(a), mean(b), mean(c))
var(mean(a), mean(b), mean(c))
sd(mean(a), mean(b), mean(c))
c(mean(a), mean(b), mean(c))
sd(1,2,3)
sd(c(mean(a), mean(b), mean(c)))
sd(c(a,b,c))
