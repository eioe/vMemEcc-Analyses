print(str_glue("Remaining trials per subject (percentage):\n
mean: {mean(summary_rem_trials_per_sub$n)} ({format(mean(summary_rem_trials_per_sub$perc), digits=3)}%)
range:  {min(summary_rem_trials_per_sub$n)} ({format(min(summary_rem_trials_per_sub$perc), digits=3)}%) - {max(summary_rem_trials_per_sub$n)} ({format(max(summary_rem_trials_per_sub$perc), digits=3)}%)"))
name(block_style)
names(block_style)
names(list(block_style))
#--------------------------------------------------------------------------
# Run main script for analysis for:
#  vMemEcc
#--------------------------------------------------------------------------
library(here)
library(knitr)
#--------------------------------------------------------------------------
# Define pathes
path_global 	    <- here('../..')
path_r_data       <- file.path(path_global, 'Data/DataR')
path_scripts_sven <- file.path(here('Workflow_Sven',
'osf_experiment1',
'_RScripts'))
#--------------------------------------------------------------------------
## load packages
source(here("Utils", "load_packages.R"))
source(here('Utils', 'print_output.R'))
source(file.path(path_scripts_sven,"loadPackages.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## define colors
source(file.path(path_scripts_sven, "loadColors.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load function to compute confidence intervals
source(file.path(path_scripts_sven,"loadFunctions.R"))
source(file.path(here('Utils', 'load_functions.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load theme
source(file.path(path_scripts_sven, "loadTheme.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load data, assign names for columns and define variable type
source(file.path(here('Utils', 'load_data.R')))
#--------------------------------------------------------------------------
# Run main script for analysis for:
#  vMemEcc
#--------------------------------------------------------------------------
library(here)
library(knitr)
#--------------------------------------------------------------------------
# Define pathes
path_global 	    <- here('../..')
path_r_data       <- file.path(path_global, 'Data/DataR')
path_scripts_sven <- file.path(here('Workflow_Sven',
'osf_experiment1',
'_RScripts'))
path_extracted_vars <- file.path(path_global, 'Writing',
'Other',
'VME_extracted_vars.json')
#--------------------------------------------------------------------------
## load packages
source(here("Utils", "load_packages.R"))
source(here('Utils', 'print_output.R'))
source(file.path(path_scripts_sven,"loadPackages.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## define colors
source(file.path(path_scripts_sven, "loadColors.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load function to compute confidence intervals
source(file.path(path_scripts_sven,"loadFunctions.R"))
source(file.path(here('Utils', 'load_functions.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load theme
source(file.path(path_scripts_sven, "loadTheme.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load data, assign names for columns and define variable type
source(file.path(here('Utils', 'load_data.R')))
#--------------------------------------------------------------------------
# Run main script for analysis for:
#  vMemEcc
#--------------------------------------------------------------------------
library(here)
library(knitr)
#--------------------------------------------------------------------------
# Define pathes
path_global 	    <- here('../..')
path_r_data       <- file.path(path_global, 'Data/DataR')
path_scripts_sven <- file.path(here('Workflow_Sven',
'osf_experiment1',
'_RScripts'))
path_extracted_vars <- file.path(path_global, 'Writing',
'Other',
'VME_extracted_vars.json')
#--------------------------------------------------------------------------
## load packages
source(here("Utils", "load_packages.R"))
source(here('Utils', 'print_output.R'))
source(file.path(path_scripts_sven,"loadPackages.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## define colors
source(file.path(path_scripts_sven, "loadColors.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load function to compute confidence intervals
source(file.path(path_scripts_sven,"loadFunctions.R"))
source(file.path(here('Utils', 'load_functions.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load theme
source(file.path(path_scripts_sven, "loadTheme.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load data, assign names for columns and define variable type
source(file.path(here('Utils', 'load_data.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
# Run main script for analysis for:
#  vMemEcc
#--------------------------------------------------------------------------
library(here)
library(knitr)
#--------------------------------------------------------------------------
# Define pathes
path_global 	    <- here('../..')
path_r_data       <- file.path(path_global, 'Data/DataR')
path_scripts_sven <- file.path(here('Workflow_Sven',
'osf_experiment1',
'_RScripts'))
path_extracted_vars <- file.path(path_global, 'Writing',
'Other',
'VME_extracted_vars.json')
#--------------------------------------------------------------------------
## load packages
source(here("Utils", "load_packages.R"))
source(here('Utils', 'print_output.R'))
source(file.path(path_scripts_sven,"loadPackages.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## define colors
source(file.path(path_scripts_sven, "loadColors.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load function to compute confidence intervals
source(file.path(path_scripts_sven,"loadFunctions.R"))
source(file.path(here('Utils', 'load_functions.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load theme
source(file.path(path_scripts_sven, "loadTheme.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load data, assign names for columns and define variable type
source(file.path(here('Utils', 'load_data.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
# Run main script for analysis for:
#  vMemEcc
#--------------------------------------------------------------------------
library(here)
library(knitr)
#--------------------------------------------------------------------------
# Define pathes
path_global 	    <- here('../..')
path_r_data       <- file.path(path_global, 'Data/DataR')
path_scripts_sven <- file.path(here('Workflow_Sven',
'osf_experiment1',
'_RScripts'))
path_extracted_vars <- file.path(path_global, 'Writing',
'Other',
'VME_extracted_vars.json')
#--------------------------------------------------------------------------
## load packages
source(here("Utils", "load_packages.R"))
source(here('Utils', 'print_output.R'))
source(file.path(path_scripts_sven,"loadPackages.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## define colors
source(file.path(path_scripts_sven, "loadColors.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load function to compute confidence intervals
source(file.path(path_scripts_sven,"loadFunctions.R"))
source(file.path(here('Utils', 'load_functions.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load theme
source(file.path(path_scripts_sven, "loadTheme.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load data, assign names for columns and define variable type
source(file.path(here('Utils', 'load_data.R')))
#--------------------------------------------------------------------------
library(rjson)
# Export vars:
extract_var <- function(var, val, path_ev=path_extracted_vars, overwrite=TRUE,
rm_leading_zero=FALSE, is_pval=FALSE, exp_format="%.3f") {
exp_vars <- fromJSON(file = path_ev)
if (is_pval | rm_leading_zero) {
#TODO: handle pvals according to alpha level
# For now only leading zero is removed.
val_str <- str_sub(sprintf(exp_format, val), 2)
} else {
val_str <- sprintf(exp_format, val)
}
if (var %in% names(exp_vars)) {
old_val <- {exp_vars[[var]]}
if (old_val != val_str) {
if (overwrite) {
txt_warn <- str_glue('Overwriting old value of {var} ({old_val}) with: {val_str}')
warning(txt_warn)
} else {
txt_warn <- str_glue('There is already a value for {var}: {old_val}.\n
Allow overwriting to extract new value: {val_str}\n
Skipping export -- keeping old value.')
warning(txt_warn)
return()
}
}
}
exp_vars[[var]] <- val_str
# Save:
jsonData <- toJSON(exp_vars)
write(jsonData, path_ev)
}
hans <- 2
extract_var(hans, hans)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#--------------------------------------------------------------------------
# Run main script for analysis for:
#  vMemEcc
#--------------------------------------------------------------------------
library(here)
library(knitr)
#--------------------------------------------------------------------------
# Define pathes
path_global 	    <- here('../..')
path_r_data       <- file.path(path_global, 'Data/DataR')
path_scripts_sven <- file.path(here('Workflow_Sven',
'osf_experiment1',
'_RScripts'))
path_extracted_vars <- file.path(path_global, 'Writing',
'Other',
'VME_extracted_vars.json')
#--------------------------------------------------------------------------
## load packages
source(here("Utils", "load_packages.R"))
source(here('Utils', 'print_output.R'))
source(file.path(path_scripts_sven,"loadPackages.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## define colors
source(file.path(path_scripts_sven, "loadColors.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load function to compute confidence intervals
source(file.path(path_scripts_sven,"loadFunctions.R"))
source(file.path(here('Utils', 'load_functions.R')))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load theme
source(file.path(path_scripts_sven, "loadTheme.R"))
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
## load data, assign names for columns and define variable type
source(file.path(here('Utils', 'load_data.R')))
#--------------------------------------------------------------------------
# Total number of experimental trials (720 x n):
n_rej_subs <- 3
print(str_glue("N rejected subjects: {n_rej_subs}"))
n_subs_analyzed <- length(unique(data_behav$ppid))
n_tot_trials <- 720 * (n_subs_analyzed + n_rej_subs)
n_tot_trials_prerej <- 720 * n_subs_analyzed
print(str_glue("Total number of recorded experimental trials (720 x {n_subs_analyzed + n_rej_subs}): {n_tot_trials_prerej}"))
print(str_glue("Total number of experimental trials after subject rejection (720 x {n_subs_analyzed}): {n_tot_trials_prerej}"))
n_tot_trials_postrej <- data_behav %>% filter(BlockStyle == 'experiment') %>%  drop_na() %>% nrow()
print(str_glue("Total number of trials after rejection: {n_tot_trials_postrej}"))
summary_rem_trials_per_sub <- data_behav %>%
filter(BlockStyle == 'experiment') %>%
drop_na() %>%
group_by(ppid) %>%
summarise(n = n(),
perc = n*100 / 720)
print(str_glue("Remaining trials per subject (percentage):\n
mean: {mean(summary_rem_trials_per_sub$n)} ({format(mean(summary_rem_trials_per_sub$perc), digits=3)}%)
range:  {min(summary_rem_trials_per_sub$n)} ({format(min(summary_rem_trials_per_sub$perc), digits=3)}%) - {max(summary_rem_trials_per_sub$n)} ({format(max(summary_rem_trials_per_sub$perc), digits=3)}%)"))
extract_var("n_rej_subs", n_rej_subs, exp_format = "%i")
extract_var("n_tot_trials_prerej_allsubs", 720 * (n_subs_analyzed + n_rej_subs), exp_format = "%i")
extract_var("n_subs_analyzed", n_subs_analyzed, exp_format = "%i")
extract_var("n_tot_trials_prerej", n_tot_trials_prerej, exp_format = "%i")
extract_var("n_tot_trials_postrej", n_tot_trials_postrej, exp_format = "%i")
extract_var("n_tot_trials_prerej", n_tot_trials_prerej, exp_format = "%i")
extract_var("avg_n_trials_per_sub_postrej", mean(summary_rem_trials_per_sub$n), exp_format="%.2d")
# Total number of experimental trials (720 x n):
n_rej_subs <- 3
print(str_glue("N rejected subjects: {n_rej_subs}"))
n_subs_analyzed <- length(unique(data_behav$ppid))
n_tot_trials <- 720 * (n_subs_analyzed + n_rej_subs)
n_tot_trials_prerej <- 720 * n_subs_analyzed
print(str_glue("Total number of recorded experimental trials (720 x {n_subs_analyzed + n_rej_subs}): {n_tot_trials_prerej}"))
print(str_glue("Total number of experimental trials after subject rejection (720 x {n_subs_analyzed}): {n_tot_trials_prerej}"))
n_tot_trials_postrej <- data_behav %>% filter(BlockStyle == 'experiment') %>%  drop_na() %>% nrow()
print(str_glue("Total number of trials after rejection: {n_tot_trials_postrej}"))
summary_rem_trials_per_sub <- data_behav %>%
filter(BlockStyle == 'experiment') %>%
drop_na() %>%
group_by(ppid) %>%
summarise(n = n(),
perc = n*100 / 720)
print(str_glue("Remaining trials per subject (percentage):\n
mean: {mean(summary_rem_trials_per_sub$n)} ({format(mean(summary_rem_trials_per_sub$perc), digits=3)}%)
range:  {min(summary_rem_trials_per_sub$n)} ({format(min(summary_rem_trials_per_sub$perc), digits=3)}%) - {max(summary_rem_trials_per_sub$n)} ({format(max(summary_rem_trials_per_sub$perc), digits=3)}%)"))
extract_var("n_rej_subs", n_rej_subs, exp_format = "%i")
extract_var("n_tot_trials_prerej_allsubs", 720 * (n_subs_analyzed + n_rej_subs), exp_format = "%i")
extract_var("n_subs_analyzed", n_subs_analyzed, exp_format = "%i")
extract_var("n_tot_trials_prerej", n_tot_trials_prerej, exp_format = "%i")
extract_var("n_tot_trials_postrej", n_tot_trials_postrej, exp_format = "%i")
extract_var("n_tot_trials_prerej", n_tot_trials_prerej, exp_format = "%i")
extract_var("avg_n_trials_per_sub_postrej", mean(summary_rem_trials_per_sub$n), exp_format="%.2f")
extract_var("min_n_trials_per_sub_postrej", min(summary_rem_trials_per_sub$n), exp_format="%.2f")
extract_var("max_n_trials_per_sub_postrej", max(summary_rem_trials_per_sub$n), exp_format="%.2f")
path_extracted_vars
# Total number of experimental trials (720 x n):
n_rej_subs <- 3
print(str_glue("N rejected subjects: {n_rej_subs}"))
n_subs_analyzed <- length(unique(data_behav$ppid))
n_tot_trials <- 720 * (n_subs_analyzed + n_rej_subs)
n_tot_trials_prerej <- 720 * n_subs_analyzed
print(str_glue("Total number of recorded experimental trials (720 x {n_subs_analyzed + n_rej_subs}): {n_tot_trials_prerej}"))
print(str_glue("Total number of experimental trials after subject rejection (720 x {n_subs_analyzed}): {n_tot_trials_prerej}"))
n_tot_trials_postrej <- data_behav %>% filter(BlockStyle == 'experiment') %>%  drop_na() %>% nrow()
print(str_glue("Total number of trials after rejection: {n_tot_trials_postrej}"))
summary_rem_trials_per_sub <- data_behav %>%
filter(BlockStyle == 'experiment') %>%
drop_na() %>%
group_by(ppid) %>%
summarise(n = n(),
perc = n*100 / 720)
print(str_glue("Remaining trials per subject (percentage):\n
mean: {mean(summary_rem_trials_per_sub$n)} ({format(mean(summary_rem_trials_per_sub$perc), digits=3)}%)
range:  {min(summary_rem_trials_per_sub$n)} ({format(min(summary_rem_trials_per_sub$perc), digits=3)}%) - {max(summary_rem_trials_per_sub$n)} ({format(max(summary_rem_trials_per_sub$perc), digits=3)}%)"))
extract_var("n_rej_subs", n_rej_subs, exp_format = "%i")
extract_var("n_tot_trials_prerej_allsubs", 720 * (n_subs_analyzed + n_rej_subs), exp_format = "%i")
extract_var("n_subs_analyzed", n_subs_analyzed, exp_format = "%i")
extract_var("n_tot_trials_prerej", n_tot_trials_prerej, exp_format = "%i")
extract_var("n_tot_trials_postrej", n_tot_trials_postrej, exp_format = "%i")
extract_var("n_tot_trials_prerej", n_tot_trials_prerej, exp_format = "%i")
extract_var("avg_n_trials_per_sub_postrej", mean(summary_rem_trials_per_sub$n), exp_format="%.2f")
extract_var("min_n_trials_per_sub_postrej", min(summary_rem_trials_per_sub$n), exp_format="%i")
extract_var("max_n_trials_per_sub_postrej", max(summary_rem_trials_per_sub$n), exp_format="%i")
# Total number of experimental trials (720 x n):
n_rej_subs <- 3
print(str_glue("N rejected subjects: {n_rej_subs}"))
n_subs_analyzed <- length(unique(data_behav$ppid))
n_tot_trials <- 720 * (n_subs_analyzed + n_rej_subs)
n_tot_trials_prerej <- 720 * n_subs_analyzed
print(str_glue("Total number of recorded experimental trials (720 x {n_subs_analyzed + n_rej_subs}): {n_tot_trials_prerej}"))
print(str_glue("Total number of experimental trials after subject rejection (720 x {n_subs_analyzed}): {n_tot_trials_prerej}"))
n_tot_trials_postrej <- data_behav %>% filter(BlockStyle == 'experiment') %>%  drop_na() %>% nrow()
print(str_glue("Total number of trials after rejection: {n_tot_trials_postrej}"))
summary_rem_trials_per_sub <- data_behav %>%
filter(BlockStyle == 'experiment') %>%
drop_na() %>%
group_by(ppid) %>%
summarise(n = n(),
perc = n*100 / 720)
print(str_glue("Remaining trials per subject (percentage):\n
mean: {mean(summary_rem_trials_per_sub$n)} ({format(mean(summary_rem_trials_per_sub$perc), digits=3)}%)
range:  {min(summary_rem_trials_per_sub$n)} ({format(min(summary_rem_trials_per_sub$perc), digits=3)}%) - {max(summary_rem_trials_per_sub$n)} ({format(max(summary_rem_trials_per_sub$perc), digits=3)}%)"))
extract_var("n_rej_subs", n_rej_subs, exp_format = "%i")
extract_var("n_tot_trials_prerej_allsubs", 720 * (n_subs_analyzed + n_rej_subs), exp_format = "%i")
extract_var("n_subs_analyzed", n_subs_analyzed, exp_format = "%i")
extract_var("n_tot_trials_prerej", n_tot_trials_prerej, exp_format = "%i")
extract_var("n_tot_trials_postrej", n_tot_trials_postrej, exp_format = "%i")
extract_var("n_tot_trials_prerej", n_tot_trials_prerej, exp_format = "%i")
extract_var("avg_n_trials_per_sub_postrej", mean(summary_rem_trials_per_sub$n), exp_format="%.2f")
extract_var("min_n_trials_per_sub_postrej", min(summary_rem_trials_per_sub$n), exp_format="%i")
extract_var("max_n_trials_per_sub_postrej", max(summary_rem_trials_per_sub$n), exp_format="%i")
extract_var("min_perc_trials_per_sub_postrej", min(summary_rem_trials_per_sub$perc), exp_format="%.2f")
extract_var("max_perc_trials_per_sub_postrej", max(summary_rem_trials_per_sub$perc), exp_format="%.2f")
View(data_behav)
n_tot_trials_rej_EEG <- data_behav %>%
filter(!ppid %in% excl_subs,
is.na(CDA_amp))
View(n_tot_trials_rej_EEG)
# Export info about rejected trials (EEG):
n_tot_trials_rej_EEG <- data_behav %>%
filter(!ppid %in% excl_subs,
BlockStyle == 'experiment',
is.na(CDA_amp))
View(n_tot_trials_rej_EEG)
# Export info about rejected trials (EEG):
n_tot_trials_rej_EEG <- data_behav %>%
filter(!ppid %in% excl_subs,
BlockStyle == 'experiment',
is.na(CDA_amp)) %>%
group_by(ppid) %>% summarise(n = n(),
perc = n*100/720)
View(n_tot_trials_rej_EEG)
# Export info about rejected trials (EEG):
n_tot_trials_rej_EEG <- data_behav %>%
filter(#!ppid %in% excl_subs,
BlockStyle == 'experiment',
is.na(CDA_amp)) %>%
group_by(ppid) %>% summarise(n = n(),
perc = n*100/720)
View(n_tot_trials_rej_EEG)
n_tot_trials_rej_EEG <- data_behav %>%
filter(!ppid %in% excl_subs,
BlockStyle == 'experiment',
is.na(CDA_amp)) %>%
group_by(ppid) %>% summarise(n = n(),
perc = n*100/720)
mean(n_tot_trials_rej_EEG$perc)
todor::todor()
warnings()
View(rej_epos_per_sub)
View(n_tot_trials_rej_EEG)
C:\Users\Felix\Seafile\Experiments\vMemEcc\Data\DataMNE\EEG\05.4_autorej\logs\ar_reject_summary.csv
dd <- read_csv('C:\Users\Felix\Seafile\Experiments\vMemEcc\Data\DataMNE\EEG\05.4_autorej\logs\ar_reject_summary.csv')
dd <- read_csv('C:\\Users\\Felix\\Seafile\\Experiments\\vMemEcc\\Data\\DataMNE\\EEG\\05.4_autorej\\logs\\ar_reject_summary.csv')
dd
dd <- read_csv('C:\\Users\\Felix\\Seafile\\Experiments\\vMemEcc\\Data\\DataMNE\\EEG\\05.4_autorej\\logs\\ar_reject_summary.csv', col_names = F)
dd
dd <- read_csv('C:\\Users\\Felix\\Seafile\\Experiments\\vMemEcc\\Data\\DataMNE\\EEG\\05.4_autorej\\logs\\ar_reject_summary.csv', col_names = F)
dd
dd <- read_csv2('C:\\Users\\Felix\\Seafile\\Experiments\\vMemEcc\\Data\\DataMNE\\EEG\\05.4_autorej\\logs\\ar_reject_summary.csv', col_names = F)
dd
View(dd)
720/4
720/3
View(n_tot_trials_rej_EEG)
for (block_style in c('perception', 'experiment')) {
files <- list.files(file.path(path_ET_rej_trials, block_style))
rej_epos_per_sub <- list()
for (file in files) {
sub_id <- str_split(file, '-')[[1]][1]
fpath <- file.path(path_ET_rej_trials, block_style, file)
# Extracted trial numbers of the to-be-rejected trials are indices relative to the task
# (perception: 1-72, vSTM-task=='experiment': 1:720).
# `trial_num`in `data_behav` are indices relative to all trials incl. training (1:812).
# We need to add an offset to compensate for earlier trials in the exp (training trials, trials in perception task):
trial_num_offset <- if_else(block_style == 'experiment', 92, 10)
rej_epos <- read_csv(fpath, col_names='trial_num')
if (nrow(rej_epos) == 0) { next }
rej_epos <- rej_epos %>%
mutate(trial_num = trial_num + trial_num_offset)
rej_epos_per_sub[[sub_id]] <- rej_epos
}
rej_epos_df <- bind_rows(rej_epos_per_sub, .id='ppid') %>% mutate(BlockStyle = block_style)
data_behav <- anti_join(data_behav, rej_epos_df, by = c('ppid', 'trial_num', 'BlockStyle'))
#TODO: check if this shouldn't be better outside of the loop
# Export info about rejected trials (ET):
n_tot_trials_rej_ET <- rej_epos_df %>% nrow()
summary_trials_rej_ET_per_sub <- rej_epos_df %>% filter(!ppid %in% excl_subs) %>%
group_by(ppid) %>% summarise(n = n(),
perc = n*100/720)
mean_n_trials_rej_ET <- mean(summary_trials_rej_ET_per_sub$n)
min_n_trials_rej_ET <- min(summary_trials_rej_ET_per_sub$n)
max_n_trials_rej_ET <- max(summary_trials_rej_ET_per_sub$n)
mean_perc_trials_rej_ET <- mean(summary_trials_rej_ET_per_sub$perc)
min_perc_trials_rej_ET <- min(summary_trials_rej_ET_per_sub$perc)
max_perc_trials_rej_ET <- max(summary_trials_rej_ET_per_sub$perc)
extract_var("mean_n_trials_rej_ET",  mean_n_trials_rej_ET, exp_format="%0.1f")
extract_var("min_n_trials_rej_ET", min_n_trials_rej_ET, exp_format="%i")
extract_var("max_n_trials_rej_ET", max_n_trials_rej_ET, exp_format="%i")
extract_var("mean_perc_trials_rej_ET", mean_perc_trials_rej_ET, exp_format="%0.1f")
extract_var("min_perc_trials_rej_ET", min_perc_trials_rej_ET, exp_format="%0.1f")
extract_var("max_perc_trials_rej_ET", max_perc_trials_rej_ET, exp_format="%0.1f")
}
View(rej_epos_df)
View(rej_epos_per_sub)
720/3
720/4
rndd <- rnorm(25)
rndd
t.test(rrnd)
t.test(rapply(list, function)nd)
t.test(rndd)
? t.test
? t.test
? print
(0.05 - 0.09 ) / (0.06 / sqrt(24))
(0.05 - 0.009 ) / (0.06 / sqrt(24))
(0.05 - 0.009 ) / (0.06 / sqrt(25))
(0.05 - 0.009 ) / (0.06 / sqrt(23))
(0.06 - 0.009 ) / (0.11 / sqrt(24))
(0.06 - 0.009 ) / (0.11 / sqrt(25))
(0.06 - 0.009 ) / (0.114 / sqrt(25))
(0.06 - 0.009 ) / (0.106 / sqrt(25))
(0.064 - 0.009 ) / (0.106 / sqrt(25))
(0.063 - 0.009 ) / (0.106 / sqrt(25))
(0.054 - 0.009 ) / (0.06 / sqrt(23))
(0.05 - 0.009 ) / (0.06 / sqrt(23))
(0.05 - 0.009 ) / (0.06 / sqrt(24))
ttst <- function(m, mu, sd, n) {
t = (m - mu) / (sd / sqrt(n))
return(t)
}
ttst(0.7, 0.009, 0.16, 25)
ttst(0.7, 0.5, 0.16, 25)
ttst(0.696, 0.5, 0.16, 25)
ttst(0.696, 0.5, 0.156, 25)
ttst(0.696, 0.5, 0.164, 25)
rrnd
rndd
t.test(rndd)
