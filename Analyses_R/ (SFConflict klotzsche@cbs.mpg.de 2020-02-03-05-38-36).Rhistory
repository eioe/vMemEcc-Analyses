samp_col_names <- sprintf('S%d', 1:180)
data_pred_df <- bind_rows(data_pred_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
data_targ_df <- bind_rows(data_targ_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
# translate to 0-1 instead of 1-2 coding:
data_targ_df[, samp_col_names] <- data_targ_df[, -(1:2)] - 1
pred_success <- data_pred_df
pred_success[, samp_col_names] <- data_targ_df[, samp_col_names] == data_pred_df[, samp_col_names]
pred_success$Ncorrect <- rowSums(pred_success[, samp_col_names], na.rm = T)
pred_success$Ntot <- rowSums(!is.na(pred_success[, samp_col_names]))
pred_success$accuracy <- pred_success$Ncorrect/pred_success$Ntot
pred_success %>%
mutate(accuracy = Ncorrect/Ntot) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorrect, Ntot, 0.5)$p.value) %>%
select(-one_of(samp_col_names)) -> pred_success
fname <- str_c
dat <- read_csv()
# disable scientific notation:
options(scipen=999)
View(pred_success)
sum(pred_success$p_val < 0.05)
# summary stats:
pred_success %>%
group_by(Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect))) -> he
pred_success %>%
group_by(Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect))) -> he
View(he)
# summary stats:
pred_success %>%
group_by(Condition) %>%
summarise(Ncorr_avg = mean(Ncorrect),
Ntot_avg = mean(Ntot)) -> he
View(he)
# summary stats:
pred_success %>%
group_by(Condition) %>%
summarise(Ncorr_avg = mean(Ncorrect),
Ntot_avg = mean(Ntot)) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value)-> he
# summary stats:
pred_success %>%
group_by(Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value)-> he
View(he)
pred_success %>%
group_by(Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg)
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value)-> he
# summary stats:
pred_success %>%
group_by(Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value)-> he
View(he)
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value)-> accuracy_summary
View(accuracy_summary)
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value)->
ggplot(aes(x = Subject, y = accuracy)) + geom_point()
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value)->
ggplot(aes(x = 'Subject', y = accuracy)) + geom_point()
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) %>%
ggplot(aes(x = 'Subject', y = accuracy)) + geom_point()
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) %>%
ggplot(aes(x = 'Subject', y = accuracy)) + geom_point() -> pplot
pplot
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) %>%
ggplot(aes(x = Subject, y = accuracy)) + geom_point() -> pplot
pplot
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) %>%
ggplot(aes(x = Subject, y = accuracy, col = Condition)) + geom_point() -> pplot
pplot
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) %>%
ggplot(aes(x = Subject, y = accuracy, col = Condition)) + geom_point() -> pplot
pplot
accuracy_summary %>%
ggplot(aes(x = Subject, y = accuracy, col = Condition)) +
geom_point() +
theme(axis.text.x=element_blank())  -> pplot
pplot
accuracy_summary %>%
ggplot(aes(x = Subject, y = accuracy, col = Condition)) +
geom_point(aes(shape = p.value < 0.5)) +
theme(axis.text.x=element_blank())  -> pplot
pplot
View(accuracy_summary)
accuracy_summary %>%
ggplot(aes(x = Subject, y = accuracy, col = Condition)) +
geom_point(aes(shape = p_val < 0.5)) +
theme(axis.text.x=element_blank())  -> pplot
pplot
accuracy_summary %>%
ggplot(aes(x = Subject, y = accuracy, col = Condition)) +
geom_point(aes(shape = p_val < 0.05)) +
theme(axis.text.x=element_blank())  -> pplot
pplot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
# disable scientific notation:
options(scipen=999)
# Set up paths:
path_data <- here('Results')
# Get summary data:
data_ls <- list()
conds <- c('mov', 'nomov')
for (cond in conds) {
fname <- str_c('results_across_methods_', cond, '.csv')
fpath <- file.path(path_data, fname)
data_ls[[cond]] <- read_csv2(fpath)
}
data_df <- bind_rows(data_ls, .id = 'condition')
# select data of binary approaches only and put into long format:
data_bin <- data_df %>%
select(condition, Subject, LSTM, CSP) %>%
gather('LSTM', 'CSP', key = method, value = accuracy)
#Get single sample data:
data_pred_ls <- list()
data_targ_ls <- list()
for (cond in conds) {
fname <- str_c('predictionTableCSP_', cond, '.csv')
fpath <- file.path(path_data, 'CSP', cond, fname)
data_pred_ls[[cond]] <- read_csv(fpath, col_names = FALSE)
fname <- str_c('targetTableCSP_', cond, '.csv')
fpath <- file.path(path_data, 'CSP', cond, fname)
data_targ_ls[[cond]] <- read_csv(fpath, col_names = FALSE)
}
samp_col_names <- sprintf('S%d', 1:180)
data_pred_df <- bind_rows(data_pred_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
data_targ_df <- bind_rows(data_targ_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
# translate to 0-1 instead of 1-2 coding:
data_targ_df[, samp_col_names] <- data_targ_df[, -(1:2)] - 1
# combine, calc accuracy, and run binomial test:
binom_func <- function(n_corr_samps, n_samps_tot, p_guess) {
binom.test(n_corr_samps, n_samps_tot, p = p_guess, alternative = "greater")
}
pred_success <- data_pred_df
pred_success[, samp_col_names] <- data_targ_df[, samp_col_names] == data_pred_df[, samp_col_names]
pred_success$Ncorrect <- rowSums(pred_success[, samp_col_names], na.rm = T)
pred_success$Ntot <- rowSums(!is.na(pred_success[, samp_col_names]))
pred_success$accuracy <- pred_success$Ncorrect/pred_success$Ntot
pred_success %>%
mutate(accuracy = Ncorrect/Ntot) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorrect, Ntot, 0.5)$p.value) %>%
select(-one_of(samp_col_names)) -> pred_success
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) %>%
accuracy_summary
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) ->
accuracy_summary
accuracy_summary %>%
ggplot(aes(x = Subject, y = accuracy, col = Condition)) +
geom_point(aes(shape = p_val < 0.05)) +
theme(axis.text.x=element_blank())  -> pplot
pplot
View(data_pred_df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
# disable scientific notation:
options(scipen=999)
# Set up paths:
path_data <- here('Results')
# Get summary data:
data_ls <- list()
conds <- c('mov', 'nomov')
for (cond in conds) {
fname <- str_c('results_across_methods_', cond, '.csv')
fpath <- file.path(path_data, fname)
data_ls[[cond]] <- read_csv2(fpath)
}
data_df <- bind_rows(data_ls, .id = 'condition')
# select data of binary approaches only and put into long format:
data_bin <- data_df %>%
select(condition, Subject, LSTM, CSP) %>%
gather('LSTM', 'CSP', key = method, value = accuracy)
#Get single sample data:
data_pred_ls <- list()
data_targ_ls <- list()
for (cond in conds) {
fname <- str_c('predictionTableCSP_', cond, '.csv')
fpath <- file.path(path_data, 'CSP', cond, fname)
data_pred_ls[[cond]] <- read_csv(fpath, col_names = FALSE)
fname <- str_c('targetTableCSP_', cond, '.csv')
fpath <- file.path(path_data, 'CSP', cond, fname)
data_targ_ls[[cond]] <- read_csv(fpath, col_names = FALSE)
}
samp_col_names <- sprintf('S%d', 1:180)
data_pred_df <- bind_rows(data_pred_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
bind_rows(data_pred_ls, .id = 'condition')
ha <- bind_rows(data_pred_ls, .id = 'condition')
View(ha)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
# disable scientific notation:
options(scipen=999)
# Set up paths:
path_data <- here('Results')
# Get summary data:
data_ls <- list()
conds <- c('mov', 'nomov')
for (cond in conds) {
fname <- str_c('results_across_methods_', cond, '.csv')
fpath <- file.path(path_data, fname)
data_ls[[cond]] <- read_csv2(fpath)
}
data_df <- bind_rows(data_ls, .id = 'condition')
# select data of binary approaches only and put into long format:
data_bin <- data_df %>%
select(condition, Subject, LSTM, CSP) %>%
gather('LSTM', 'CSP', key = method, value = accuracy)
#Get single sample data:
data_pred_ls <- list()
data_targ_ls <- list()
for (cond in conds) {
fname <- str_c('predictionTableCSP_', cond, '.csv')
fpath <- file.path(path_data, 'CSP', cond, fname)
data_pred_ls[[cond]] <- read_csv(fpath, col_names = FALSE)
fname <- str_c('targetTableCSP_', cond, '.csv')
fpath <- file.path(path_data, 'CSP', cond, fname)
data_targ_ls[[cond]] <- read_csv(fpath, col_names = FALSE)
}
samp_col_names <- sprintf('S%d', 1:270)
data_pred_df <- bind_rows(data_pred_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
data_targ_df <- bind_rows(data_targ_ls, .id = 'condition') %>%
rename_all(~c('Condition', 'Subject', samp_col_names))
# translate to 0-1 instead of 1-2 coding:
data_targ_df[, samp_col_names] <- data_targ_df[, -(1:2)] - 1
# combine, calc accuracy, and run binomial test:
binom_func <- function(n_corr_samps, n_samps_tot, p_guess) {
binom.test(n_corr_samps, n_samps_tot, p = p_guess, alternative = "greater")
}
pred_success <- data_pred_df
pred_success[, samp_col_names] <- data_targ_df[, samp_col_names] == data_pred_df[, samp_col_names]
pred_success$Ncorrect <- rowSums(pred_success[, samp_col_names], na.rm = T)
pred_success$Ntot <- rowSums(!is.na(pred_success[, samp_col_names]))
pred_success$accuracy <- pred_success$Ncorrect/pred_success$Ntot
pred_success %>%
mutate(accuracy = Ncorrect/Ntot) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorrect, Ntot, 0.5)$p.value) %>%
select(-one_of(samp_col_names)) -> pred_success
# summary stats:
pred_success %>%
group_by(Subject, Condition) %>%
summarise(Ncorr_avg = round(mean(Ncorrect)),
Ntot_avg = round(mean(Ntot))) %>%
mutate(accuracy = Ncorr_avg/Ntot_avg) %>%
rowwise() %>%
mutate(p_val = binom_func(Ncorr_avg, Ntot_avg, 0.5)$p.value) ->
accuracy_summary
accuracy_summary %>%
ggplot(aes(x = Subject, y = accuracy, col = Condition)) +
geom_point(aes(shape = p_val < 0.05)) +
theme(axis.text.x=element_blank())  -> pplot
######## old stuff (can probably be deprecated):
data_bin %>%
select(accuracy) %>%
na.omit() %>%
mutate(avg_n_corr_samples = round(accuracy * 180)) %>%
rowwise() %>%
mutate(p_val = binom_func(avg_n_corr_samples, 180, 0.5)$p.value) -> he
dat %>%
select(condition, Subject, LSTM, CSP) %>%
gather('LSTM', 'CSP', key = method, value = accuracy) %>%
group_by(method, condition) %>%
summarise(meanacc = mean(accuracy, na.rm=T)) ->
outp
pplot
pplot
View(data_pred_df)
install.packages('eegutils')
install.packages("remotes")
install.packages("remotes")
getwd()
cond = mov
cond = 'mov
cond = 'mov'
cond = 'mov'
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
# disable scientific notation:
options(scipen=999)
# Set up paths:
path_data <- here('Results')
fname <- str_c('NVR_', 'S02_' cond, '.csv')
fname <- str_c('NVR_', 'S02_', cond, '.csv')
fpath <- file.path(path_data, fname)
data_lstm <- read_csv(fpath)
fpath <- file.path(path_data, 'LSTM', cond, fname)
data_lstm <- read_csv(fpath)
list.files('C:/Users/Felix/Seafile/PhD/Experiments/NeVRo/NeVRo/Results/LSTM/mov/NVR_S02_mov.csv')
list.files('C:/Users/Felix/Seafile/PhD/Experiments/NeVRo/NeVRo/Results/LSTM/mov/')
data_lstm <- read_csv(fpath)
data_lstm <- read_csv(fpath, col_names = FALSE)
View(data_lstm)
? filter
remotes::install_github("craddm/eegUtils")
remotes::install_github("craddm/eegUtils")
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
remotes::install_github("craddm/eegUtils")
library(eegUtils)
? topoplot()
install.packages('MatlabR')
library(R.matlab)
ha <- readMat('C:/Users/Felix/Downloads/CSP_results_mov.mat')
ha$CSP.results
eeg_ica
ha$CSP.results[['results']]
ha$CSP.results$results
ha$CSP.results[1]
ha$CSP.results[[1]]
class(ha$CSP.results[[1]])
he <- ha$CSP.results[[1]]
he[1]
he[2]
he <- ha$CSP.results
str(he)
data_frame(he)
class(he)
he[1]
class(he[1])
data_frame(he[1])
ho <- data_frame(he[1])
he[1]
he[1][1]
he[1][,,1]
he[1][,1]
he[1][1]
he[1][2]
he[1][[1]]
he[1][[1]]
he[[1]]
he[,,1]
he[1,,1]
he[1,,1]$results[1]
he[1,,1]$results[2]
ho <- he[1,,1]$results
he[1,11,1,1,1,1]
he[1,11,1]
he[1,11,1,1]
he[1,11]
he[1,1,1]$results
he[1,1,2]$results
he[1,2,1]$results
he[2,,1]$results
ho[1]
ho[[1]]
ho[[1:3]]
ho[1:3
]
size(ho)
dim(ho)
ho[1,1,:]
ho[1,1,]
ho[1,1,1]
ho[,1,1]
ho[,1,1]$weights
ho[,1,1]$weights[,]
dim(ho[,1,1]$weights)
ho[,1,1]$weights[,1,1]
hu <- ho[,1,1]$weights[,1,1]$SSD.A.sel *  ho[,1,1]$weights[,1,1]$CSP.A
hu <- ho[,1,1]$weights[,1,1]$SSD.A.sel *  ho[,1,1]$weights[,1,1]$CSP.A''
hu <- ho[,1,1]$weights[,1,1]$SSD.A.sel *  ho[,1,1]$weights[,1,1]$CSP.A'
''
hu <- ho[,1,1]$weights[,1,1]$SSD.A.sel *  t(ho[,1,1]$weights[,1,1]$CSP.A)
size(ho[,1,1]$weights[,1,1]$CSP.A)
dim(ho[,1,1]$weights[,1,1]$CSP.A)
ho[,1,1]$weights[,1,1]$CSP.A
dim(ho[,1,1]$weights[,1,1]$SSD.A.sel)
hu <- t(ho[,1,1]$weights[,1,1]$SSD.A.sel) *  t(ho[,1,1]$weights[,1,1]$CSP.A)
hu <- t(ho[,1,1]$weights[,1,1]$SSD.A.sel) *  ho[,1,1]$weights[,1,1]$CSP.A
hu <- ho[,1,1]$weights[,1,1]$SSD.A.sel
View(hu)
humat <- matrix(hu)
View(humat)
View(humat, 5, 4)
? matrix
View(humat, nrow = 5, ncol = 4)
humat <- matrix(hu, 5, 4)
View(hu)
humat <- matrix(hu, 5, 32)
SSD_A <- ho[,1,1]$weights[,1,1]$SSD.A.sel
CSP_A <- ho[,1,1]$weights[,1,1]$CSP.A
size(CSP_A)
dim(CSP_A)
dim(SSD_A)
CSP_A * SSD_A
CSP_A %*% SSD_A
tot <- CSP_A %*% SSD_A
data <- data.frame(amplitude = tot[1,],
electrode = 'Fp1')
topoplot(data,
chanLocs = chan_info,
interp_limit = interp_limit,
scaling = scaling,
chan_marker = chan_marker,
time_lim = NULL,
verbose = verbose)
sdat <- import_set('C:/Users/Felix/Downloads/NVR_S02mov_PREP_SBA_eventsaro_rejcomp_SSD_narrowband_CSP.set')
sdat <- import_set('C:/Users/Felix/Downloads/NVR_S02mov_PREP_SBA_eventsaro_rejcomp_SSD_narrowband_CSP_v6.set')
? import_set
last_error()
sdat <- import_set('C:/Users/Felix/Downloads/NVR_S02mov_PREP_SBA_eventsaro_rejcomp_SSD_narrowband_CSP_v6.set')
last_error()
rlang::last_error()
library(devtools)
devtools::install_github("mne-tools/mne-r")
install.packages('devtools')
library(devtools)
devtools::install_github("mne-tools/mne-r")
library(devtools)
devtools::install_github("mne-tools/mne-r")
Sys.getenv("R_LIBS_USER")
knitr::opts_chunk$set(echo = TRUE)
2+2
knitr::opts_chunk$set(echo = TRUE)
2+2
library(tidyverse)
library(here)
source(here("Utils", "wrangle_data.R"))
source(here("Utils", "plot_behavior.R"))
setwd(here())
d2Path <- "../../Data/SubjectData/"
